// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../backend/node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  password     String
  firstName    String
  lastName     String
  role         UserRole @default(STAFF)
  refreshToken String?
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  branchId     Int?
  branch       Branch?  @relation(fields: [branchId], references: [id])
  
  // User relationships
  managedBranches Branch[] @relation("BranchManager")
  createdGaps     GapAssessment[]
  createdActions  ActionPlan[]
  assignedActions ActionPlan[] @relation("ActionAssignee")
  ownedRisks      Risk[]
  createdSchedules Schedule[]
  responsibleSchedules Schedule[] @relation("ScheduleResponsible")
  notifications   Notification[]
  createdRequirements Requirement[]

  @@map("users")
}

model Branch {
  id          Int      @id @default(autoincrement())
  name        String
  region      String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  managerId   Int?
  manager     User?    @relation("BranchManager", fields: [managerId], references: [id])
  
  users       User[]
  gapAssessments GapAssessment[]
  risks       Risk[]
  schedules   Schedule[]
  requirements Requirement[]

  @@map("branches")
}

// Requirements Management
model Requirement {
  id           Int      @id @default(autoincrement())
  clause       String   @unique
  subClause    String?
  title        String
  description  String
  category     String   @default("ISO 27001")
  standard     String   @default("ISO 27001:2022")
  section      String
  isMandatory  Boolean  @default(true)
  priority     Priority @default(MEDIUM)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  createdById  Int
  createdBy    User     @relation(fields: [createdById], references: [id])
  branchId     Int?
  branch       Branch?  @relation(fields: [branchId], references: [id])
  
  gapAssessments GapAssessment[]
  actionPlans    ActionPlan[]

  @@map("requirements")
}

// Gap Assessment
model GapAssessment {
  id            Int      @id @default(autoincrement())
  status        Int      @default(0) // 0-3 scale: 0=Not Implemented, 1=Partially, 2=Mostly, 3=Fully
  description   String
  evidenceLink  String?
  riskScore     Int      @default(0) // 0-3 scale
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  requirementId Int
  requirement   Requirement @relation(fields: [requirementId], references: [id])
  branchId      Int
  branch        Branch      @relation(fields: [branchId], references: [id])
  createdById   Int
  createdBy     User        @relation(fields: [createdById], references: [id])
  
  actionPlans   ActionPlan[]

  @@map("gap_assessments")
}

// Action Plans
model ActionPlan {
  id              Int           @id @default(autoincrement())
  actionText      String
  priority        ActionPriority @default(MEDIUM)
  status          ActionStatus  @default(PENDING)
  deadline        DateTime?
  completionNotes String?
  completedAt     DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  gapId           Int
  gap             GapAssessment @relation(fields: [gapId], references: [id])
  responsibleId   Int
  responsible     User          @relation("ActionAssignee", fields: [responsibleId], references: [id])
  createdById     Int
  createdBy       User          @relation(fields: [createdById], references: [id])
  requirementId   Int
  requirement     Requirement   @relation(fields: [requirementId], references: [id])

  @@map("action_plans")
}

// Risk Management
model Risk {
  id          Int      @id @default(autoincrement())
  description String
  likelihood  Int      @default(1) // 1-5 scale
  impact      Int      @default(1) // 1-5 scale
  status      RiskStatus @default(ACTIVE)
  mitigation  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  ownerId     Int
  owner       User     @relation(fields: [ownerId], references: [id])
  branchId    Int
  branch      Branch   @relation(fields: [branchId], references: [id])

  @@map("risks")
}

// Schedule Management
model Schedule {
  id              Int            @id @default(autoincrement())
  type            ScheduleType
  title           String
  description     String
  dueDate         DateTime
  frequency       ScheduleFrequency @default(ANNUAL)
  customInterval  Int?           // For custom frequency in days
  status          ScheduleStatus @default(PENDING)
  priority        Priority       @default(MEDIUM)
  isRecurring     Boolean        @default(false)
  lastCompleted   DateTime?
  nextDueDate     DateTime?
  reminderDays    Int[]          @default([7, 3, 1]) // Days before due to send reminders
  completionNotes String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  // Relations
  branchId        Int
  branch          Branch         @relation(fields: [branchId], references: [id])
  responsibleId   Int
  responsible     User           @relation("ScheduleResponsible", fields: [responsibleId], references: [id])
  createdById     Int
  createdBy       User           @relation(fields: [createdById], references: [id])

  @@map("schedules")
}

// Notifications
model Notification {
  id        Int                @id @default(autoincrement())
  message   String
  type      NotificationType   @default(EMAIL)
  status    NotificationStatus @default(PENDING)
  sentAt    DateTime?
  createdAt DateTime           @default(now())

  // Relations
  userId    Int
  user      User               @relation(fields: [userId], references: [id])

  @@map("notifications")
}

// Enums
enum UserRole {
  ADMIN
  MANAGER
  COMPLIANCE_OFFICER
  STAFF
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ActionPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ActionStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum RiskStatus {
  ACTIVE
  MITIGATED
  CLOSED
}

enum ScheduleType {
  RISK_ASSESSMENT
  INTERNAL_AUDIT
  MANAGEMENT_REVIEW
  TRAINING
  COMPLIANCE_CHECK
}

enum ScheduleFrequency {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  SEMI_ANNUAL
  ANNUAL
  CUSTOM
}

enum ScheduleStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  OVERDUE
  CANCELLED
}

enum NotificationType {
  EMAIL
  SMS
  SYSTEM
}

enum NotificationStatus {
  PENDING
  SENT
  FAILED
}
